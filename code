import { Connection, PublicKey, ParsedAccountData } from "@solana/web3.js";
import { Metaplex } from "@metaplex-foundation/js";
// Establish a connection using the free RPC endpoint from gsnode.io
const connection = new Connection("https://rpc.free.gsnode.io");


/**
* Check if the token mint has a freeze authority.
* @param mint - The mint address of the token.
* @returns A promise that resolves to true if freeze authority exists.
*/
async function checkFreezeAuthority(mint: PublicKey): Promise<boolean> {
try {

// Retrieve parsed account info for the mint
const data = await connection.getParsedAccountInfo(mint, "processed");
const parsedMintInfo = (data?.value?.data as ParsedAccountData)?.parsed?.info;
if (!parsedMintInfo) {
console.warn("Mint information not found or invalid.");
return false;
}

// Check if the freezeAuthority field is present
return parsedMintInfo.freezeAuthority !== null && parsedMintInfo.freezeAuthority !==
undefined;
} catch (error) {
console.error("Error validating freeze authority:", error);
return false;
}
}

/**
* Check if the token mint has a mint authority.
* @param mint - The mint address of the token.
* @returns A promise that resolves to true if mint authority exists.
*/
async function checkMintAuthority(mint: PublicKey): Promise<boolean> {
try {
// Retrieve parsed account info for the mint
const data = await connection.getParsedAccountInfo(mint, "processed");
const parsedMintInfo = (data?.value?.data as ParsedAccountData)?.parsed?.info;
if (!parsedMintInfo) {
console.warn("Mint information not found or invalid.");
return false;
}
// Check if the mintAuthority field is present
return parsedMintInfo.mintAuthority !== null && parsedMintInfo.mintAuthority !== undefined;
} catch (error) {
console.error("Error validating mint authority:", error);
return false;
}


/**
* Check if the token has an update authority.
* @param mint - The mint address of the token.
* @returns A promise that resolves to true if update authority exists.
*/
async function checkUpdateAuthority(mint: PublicKey): Promise<boolean> {
try {
// Create a Metaplex instance using our connection
const metaplex = new Metaplex(connection);
// Fetch the asset data using the mint address
const asset = await metaplex.nfts().findByMint({ mintAddress: mint });
// For NFTs/SFTs, ensure update authority is set
if (asset.model === "nft" || asset.model === "sft") {
return asset.updateAuthorityAddress !== null;
}
return false;
} catch (error) {
console.error("Error during update authority validation:", error);
return false;
}
}

